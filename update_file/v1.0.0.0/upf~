#!/bin/bash

# -------------------------------------------------------------------
# Filename:    upf
# Revision:    1.0.0.0
# Date:        2012/08/10
# Author:      Luke
# Email:       zhsongdl@cn.ibm.com
# Description: 	This is a CVS assistant scripts,it could help us update
#		CVS code to server without typing password each time. 
#		You can make use of these scripts instead of creating your
#		own script, if they meet your needs. 
# -------------------------------------------------------------------
# Copyright:   2012 (c) PTT
# License:     GPL
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# you should have received a copy of the GNU General Public License
# along with this program.
#
# If any changes are made to this script, please mail me a copy of the changes
# -------------------------------------------------------------------
#Version 1.0
# Auto check-out or update CVS code without typing password each time.
#
#
#TO-DO 7:
#The authenticity of host 'cvs.pok.ibm.com (9.57.11.175)' can't be established.
#RSA key fingerprint is d6:96:01:4e:60:bf:4f:80:2c:77:ea:b9:e5:da:99:54.
#Are you sure you want to continue connecting (yes/no)? 

#BUG 1:
#zhangsong@cvs.pok.ibm.com's password: 
#zhangsong@cvs.pok.ibm.com's password: Permission denied, please try again.
#
#To install and use the script:
#
#1) Place the script inside your HOME directory
#   a.Set the permissions on the script to be executable.
#   b.Modify the script and set up your own password at line 118: password=XXXXXX
#
#2) Add an alias to bashrc
#	*********************************************************
#	* $ echo 'alias u=~/upf.sh >> ~/.bashrc
#	* $ source ~/.bashrc
#	*********************************************************
#
#3) Install 'expect' command if it dosen't installed on the target server before
#	Red Hat/Cent OS:	yum install expect
#	Ubuntu: 		apt-get install expect
#
#4) To start using the script 
#	a.Change directory to your application path which the code 
#	  will check-out and deploy on it.
#	*********************************************************
#	* $ cd /var/www/html/dev/track/
#	*********************************************************
#	b.Update your code using the alias of the script
#	*********************************************************
#	* $ u index.php
#	*********************************************************
# Define some colors first:
RED='\e[1;31m'
BLUE='\e[1;34m'
CYAN='\e[1;36m'
NC='\e[0m' # No Color

update_file=$1
location=$2
password=$3
file_version=""
#Define the username via executing the `whoami` command.
username=`whoami`
#Define the current path via executing the `pwd` command.
current_dir=`pwd`
#Define the temporary directory for the script.
tmp_dir=~/upf_tmp_dir
is_check='n'

#Set up CVS environment for PTT.
if [ -z "$CVSROOT" ]
then
	CVSROOT=:ext:cvs.pok.ibm.com:/home/cvsroot CVS_RSH=ssh;
	export CVSROOT CVS_RSH
fi

#Default configuration variables.
_DEFAULT_MODEL="track"
_DEV_PATH="/var/www/html/dev"
_STAGE_PATH="/var/www/html/ptt/App"

if [ "${location}" = "dev" ]; then
	location=$_DEV_PATH
fi

if [ "${location}" = "stage" ]; then
	location=$_STAGE_PATH
fi

if [ -z $location ]; then
	location=$_STAGE_PATH
fi

if [ -z $password ]; then
	password=7fxes0hy
fi

if [ `echo "$update_file" | grep "$_DEFAULT_MODEL"` ] 
then
	update_model_and_file="$update_file"
else
	update_model_and_file="$_DEFAULT_MODEL/$update_file"
fi

if [ ! -d "$tmp_dir" ]; then
	mkdir -p "$tmp_dir"
	chmod 777 -R "$tmp_dir"
fi


# Defined sub script start ### ### 

# Defined the scratch script here.
cat > $tmp_dir/run-scratch-auto-pwd <<EOD
#!/usr/bin/expect

spawn $tmp_dir/scratch
expect "password:"
send "$password\r"
expect eof
EOD
chmod 700 $tmp_dir/run-scratch-auto-pwd

#Check status of file.
cat > $tmp_dir/check-file-status <<EOD
#!/bin/bash
cvs status -v $update_file > $tmp_dir/cvs_version_list_tmp
EOD
chmod 700 $tmp_dir/check-file-status

#Check out non-exist file.
cat > $tmp_dir/checkout-file <<EOD
#!/bin/bash
echo -e " cvs co $CYAN$update_model_and_file$NC"
cvs co $update_model_and_file
EOD
chmod 700 $tmp_dir/checkout-file


# Defined sub script end ### ### 

# Defined functions start ### ### 

# Function: Defined automatic run-script function 
# to run the scratch.
function runScript {
mv $tmp_dir/$1 $tmp_dir/scratch
if [ -d $location ]; then
	cd $location
fi
$tmp_dir/run-scratch-auto-pwd
}
# Function: List version of specific file.
# Return: <Integer> version number
function listVersionOfSpecificFile {
#Check files status and list the cvs version of each file.
runScript "check-file-status"
#List the file's branch and version
pumpInfo "Automatic sign-in please waiting for a while ... "
pumpInfo "Lastest version of "$CYAN $update_file"$NC,please chose one:"
cat $tmp_dir/cvs_version_list_tmp | sed -n '11,$p;' | sed -n '1,20p;' | sed 's/^\s*//g' | sed '/^$/d' > $tmp_dir/version_list
resultNum=`cat $tmp_dir/version_list | wc -l` 
if [ $resultNum = 0 ]; then
	pumpError "Invalid file - I know nothing about $update_file"
	exit
fi
cat -n $tmp_dir/version_list
# Capture value input from standard input
userPrompt "Please chose one branch $CYAN[1-$resultNum]:"
read version
file_version=`awk -vversion="$version" -F '\t' 'NR==version {print $1}' $tmp_dir/version_list | sed 's/\s//g'`

echo $file_version > $tmp_dir/file_version
}

function pumpError {
	echo -e "$RED Error: $1$NC"
}

function pumpInfo {
	echo -e "$1$NC"
}

function userPrompt {
	echo -e -n "$1$NC"
}

# Defined functions end ### ### 

##################################################
# Main
##################################################
if [ ! -f "$location/$update_file" ];
then
	if [ -f "$current_dir/$update_file" ];
	then
		location=$current_dir
	else
		pumpError "Invalid file - $location/$update_file not exist!"
		pumpInfo "Please select following operations:"
		pumpInfo "1.It's an$CYAN exist$NC file in CVS,update it directly."
		pumpInfo "2.It's a$CYAN non-exist$NC file,try to check it out now."
		pumpInfo "3.Exit"
 		userPrompt "Please choose one operation$CYAN[1-3]:"
		read is_check
	fi
fi

if [ "${is_check}" = "2" ]; then
	#Check files from CVS.
	runScript "checkout-file"
	exit
fi

if [ "${is_check}" = "3" ]; then
	exit
fi

if [ ! -d "$tmp_dir" ]; then
	mkdir -p "$tmp_dir"
	chmod 777 -R "$tmp_dir"
	exit
fi

if [ ! -f $tmp_dir/uplog ];
then
	touch $tmp_dir/uplog
fi

#List version of specific file and then get user input as the update branch
listVersionOfSpecificFile

# Capture value returnd by last command
# file_version=$?
file_version=`cat $tmp_dir/file_version`

#Update file to specific version.
cat > $tmp_dir/update-file <<EOD
#!/bin/bash
echo -e "cvs update -j $CYAN$file_version $update_file$NC"
cvs update -j $file_version $update_file
EOD
chmod 700 $tmp_dir/update-file

#Check files status and list the cvs version of each file.
runScript "update-file" > $tmp_dir/update_result

cat $tmp_dir/update_result
