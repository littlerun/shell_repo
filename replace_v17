
1.	2.	3.	4.	5.
------------------------------------------------->


1.Tag Release	
2.Development	
3.Merge release into HEAD on STAGE
4.UAT & Bug Fix
5.Merge release into HEAD and submit it to CVS
	5.1 Filter out all underway tasks's codes on Stage;(Click here to see how to find the underway task on the stage code)
	5.2 Filter out all debug codes on Stage,but according to the PTT development rules,debug on the Stage environment is not allowed;
	5.3 If there is still something different was found after above 2 steps,please confirm the code with developer that made the most recent change.
	5.4 Commit the code to HEAD.

smallfooter -> smallfooter_v17
printsmallhead -> printsmallhead_v17
printfooter -> printfooter_v17




find ./ -regex .*php -print0 | xargs -0 perl -p -i.orig -e "s/smallfooter\((.*)\)/smallfooter_v17(\1)/;" 
find ./ -regex .*php -print0 | xargs -0 perl -p -i.orig -e "s/printsmallhead\((.*)\)/printsmallhead_v17(\1)/;"
find ./ -regex .*php -print0 | xargs -0  perl -p -i.orig -e "s/printfooter\((.*)\)/printfooter_v17(\1)/;" 

find ./ -regex .*inc -print0 | xargs -0 perl -p -i.orig -e "s/smallfooter\((.*)\)/smallfooter_v17(\1)/;" 
find ./ -regex .*inc -print0 | xargs -0 perl -p -i.orig -e "s/printsmallhead\((.*)\)/printsmallhead_v17(\1)/;"
find ./ -regex .*inc -print0 | xargs -0  perl -p -i.orig -e "s/printfooter\((.*)\)/printfooter_v17(\1)/;" 

find ./ -regex .*tpl -print0 | xargs -0 perl -p -i.orig -e "s/smallfooter\((.*)\)/smallfooter_v17(\1)/;" 
find ./ -regex .*tpl -print0 | xargs -0 perl -p -i.orig -e "s/printsmallhead\((.*)\)/printsmallhead_v17(\1)/;"
find ./ -regex .*tpl -print0 | xargs -0  perl -p -i.orig -e "s/printfooter\((.*)\)/printfooter_v17(\1)/;" 

find ./ -regex .*\.#.* -print0 | xargs -0 rm -rf


find ./ -type d -name CVS -print0 | xargs -0 rm -rf

-------------------------------------------------------------------------------------------------------------




Find the added files: 

1.Make a directory for the code:

mkdir Merge_HEAD

2.Check out the lastest version of HEAD

cd Merge_HEAD

cvs co track

3.cvs update -j B2012_Buddy_Release track
This will list: 
[t1.png]
Conflicts are files that you modified and that were modified on the head revision as well. 

Files with conflicts will have conflict markers in them. Conflict markers look like:
<<<<<<< sod.tpl
	<td><img src="/track/img/sod-top-title.jpg" width="606" /></td>
=======
       	<td align="top"><img src="/track/img/sod-top-title.jpg" width="886" /></td>
>>>>>>> 1.3.48.3

    o sod.tpl is the name of the file
    o Your lines(<td align="top"><img src="/track/img/sod-top-title.jpg" width="886" /></td>) is the lines of your file that conflict with the lines that exist.
    o Other person's lines is the lines the other person added while you were working.
    o 1.3.48.3 is the current version (ie, the one the other person checked-in.)


4.Find the confilicts:
$ grep '<<<<<<' ./ -R -n --color
[t2.png]

The new updates are now in your working directory. Even if you didn't get any conflicts, you have to verify that the CVS merge process didn't incorrectly merge your changes. Remember that just because CVS didn't find a direct conflict doesn't mean that the code logic is correct or that the program compiles, CVS knows nothing about the program or the programming language. 

5.deal with conflicts (some code need disscuss with team member)

6.compare the merged file with stage using the script wrote by Bruce(check_version_difference.sh)

$~/check_version_difference.sh --local ~/Merge_HEAD/track ~/Stage/track

Find out the difference and deal with it,the process as follow:

	Find the "Only in" Stage file 
	[t4.png]
	1.1)  Find if the file is owned by the working on task;
	1.2)  Find if the file is the debug file;
	1.3)  Find if the file is forget to commit;(Disscuss with our team member,is so,commit it to stage)

7.Press "Y" when you got the continue message such as: "Continue:[Y/N]?"
	[t5.png]
		
 	Find the release file different with the merged file using Tkdiff:
	[t6.png]
	
	The difference will be displayed between the two files,showing regions that have changed. 
	Red is used to show deleted lines,green for addedlines, blue for changed lines,and yellow for overlapping lines during a 3-way merge.
	1.1)  Find if the file is owned by the working on task;
	1.2)  Find if the file is the debug file;
	1.3)  Find if the file is forget to commit;(The code need disscuss with team member,is so,commit it to stage)

In this step,we use Tkdiff GUI as the comparison tool,see here if you are not familiar with Tkdiff GUI tool.
In the Tkdiff GUI,you may use the following shortcut keys:
	f	First diff
	c	Center current diff
	l	Last diff
	n	Next diff
	p	Previous diff
	1	Merge Choice 1
	2	Merge Choice 2
	q	Quit from current window


8.Merging of the newly generated code with the existing code;

9.Check out the track model of the HEAD once again such as ~/HEAD/track.

10.

$  diff -r -EBbw --exclude='CVS' --exclude='.#*' ~/Merge_HEAD/track/ ~/HEAD/track/ 2>/dev/null | grep 'Only in' /^.*\/\///g' | tr "\n" " " | sed 's/^/cvs add /g' > ~/HEAD/add_new_files.sh
$ chmod +x ~/HEAD/add_new_files.sh

$ rsync -avz --exclude="CVS" --exclude="*/CVS"  ~/Merge_HEAD/track/ ~/HEAD/track/

11.

$ diff -r -EBbw -q --exclude='CVS' --exclude='.#*'  -I "^[[:blank:]]*[{/]*\*" -I "^[[:blank:]]*$" -I "^[[:blank:]]*//"  ~/Merge_HEAD/track/ ~/HEAD/track/



12.

$ find ~/HEAD/track/ -regex .*\.#.* -print0 | xargs -0 rm -rf

12.

$ cd ~/HEAD/track
$ ~/HEAD/add_new_files.sh
$ cvs commit



Get the files that only exist in the Stage and then 


$ diff -r track ~/HEAD/track | grep 'Only in' | sed 's/: /\//g' | awk -F " " '{print $3}'


cp track/asig/copy_task_q.php $H/track/asig/copy_task_q.php
cp track/crons/cron_sponsor_access_revalidation.php $H/track/crons/cron_sponsor_access_revalidation.php
cp track/crons/cron_sponsor_access_revalidation_report.php $H/track/crons/cron_sponsor_access_revalidation_report.php
cp track/db/dbstruc.2012.Buddy.release.sql.txt $H/track/db/dbstruc.2012.Buddy.release.sql.txt
cp track/img/ST_Logo_Active.png $H/track/img/ST_Logo_Active.png
cp track/js/wdlview.js $H/track/js/wdlview.js
cp track/MVC/view/page/asig/taskdetail/wdlviewwithst.tpl $H/track/MVC/view/page/asig/taskdetail/wdlviewwithst.tpl
cp track/MVC/view/page/user/access_validation/sponsor_revalidation_error_page.tpl $H/track/MVC/view/page/user/access_validation/sponsor_revalidation_error_page.tpl
cp track/proj/cancelAllOpeningAssignmentsAssist.php $H/track/proj/cancelAllOpeningAssignmentsAssist.php
cp track/proj/cancelAllOpeningAssignments.php $H/track/proj/cancelAllOpeningAssignments.php
cp track/user/access_validation/config/config.sponsorRevalidationConfig.php $H/track/user/access_validation/config/config.sponsorRevalidationConfig.php
cp track/user/access_validation/config/config.sponsorRevalidationSQLStatGenerator.php $H/track/user/access_validation/config/config.sponsorRevalidationSQLStatGenerator.php
cp track/user/access_validation/controller/controller.sponsorRevalidation.php $H/track/user/access_validation/controller/controller.sponsorRevalidation.php
cp track/user/access_validation/model/class.accessValidationDAO.php $H/track/user/access_validation/model/class.accessValidationDAO.php
cp track/user/access_validation/sponsor_revaildation.php $H/track/user/access_validation/sponsor_revaildation.php
cp track/xmlhttprequests/getwdllist.php $H/track/xmlhttprequests/getwdllist.php


> Copy above lines into "copy_m_to_h.sh"

$ sh -x copy_m_to_h.sh
$ cat copy_m_to_h.sh | awk -F " " '{print $2}' | tr "\n" " "|  >~/commit_new_file
$ cd HEAD/track
$ `cat ~/copy_m_to_h.sh | awk -F " " '{print $2}' | tr "\n" " " | sed "s/^/cvs add /g" | sed "s/track\///g"`
$ `cat ~/copy_m_to_h.sh | awk -F " " '{print $2}' | tr "\n" " " | sed "s/^/cvs commit /g" | sed "s/track\///g"`

